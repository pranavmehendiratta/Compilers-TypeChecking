struct P{
    int x;
    int y;
};

struct P1{
    int x;
    int y;
};

void func() {
    struct P point;
    int a;
    bool b;
    cout << a(int);
    cout << b(bool);
    cout << point(P);
    cin >> a(int);
    cin >> b(bool);
    cin >> point(P);
    if (b(bool)) {
        cout << a(int);
        cout << b(bool);
    }
    if ((b(bool) >= 3)) {
        cout << a(int);
        cout << b(bool);
    }
    if (b(bool)) {
        cout << a(int);
        cout << b(bool);
        cout << point(P);
    }
    else {
        cout << a(int);
        cout << b(bool);
        cout << point(P);
    }
    while (b(bool)) {
        cout << a(int);
        cout << b(bool);
    }
    while ((b(bool) >= 3)) {
        cout << a(int);
        cout << b(bool);
    }
    repeat (a(int)) {
        cout << a(int);
        cout << b(bool);
    }
    repeat (b(bool)) {
        cout << a(int);
        cout << b(bool);
    }
    a(int)++;
    b(bool)++;
    return;
    return a(int);
}

int f1() {
    int a;
    return a(int);
}

int f3(int x, int y) {
    cout << x(int);
}

int f2() {
    bool b;
    int a;
    int c;
    struct P point1;
    struct P1 point2;
    b(bool) = true;
    a(int) = 1;
    a(int) = b(bool);
    f1(->int) = func(->void);
    P(struct) = P1(struct);
    point1(P) = point2(P1);
    f3(int,int->int)(a(int), b(bool));
    cout << (a(int) + b(bool));
    return b(bool);
}

